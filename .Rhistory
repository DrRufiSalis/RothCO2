"VMR6) Manure; 60%clay; Reduced tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMR7) Manure; 70%clay; Reduced tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMR8) Manure; 80%clay; Reduced tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMR9) Manure; 90%clay; Reduced tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMR10) Manure; 100%clay; Reduced tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN0) Manure; 0%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN1) Manure; 10%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN2) Manure; 20%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN3) Manure; 30%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN4) Manure; 40%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN5) Manure; 50%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN6) Manure; 60%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN7) Manure; 70%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN8) Manure; 80%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN9) Manure; 90%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"VMN10) Manure; 100%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
"VMN0) Manure; 0%clay; No tillage" = CTails_P/ModelDFSL_R_CT_VLC0P.xlsx
View(data_frames_YCT)
Merge_Models("All", "Both")
View(MergedModels_VP_YCT)
#Put all data frames into list
path_YCT <- "CTails_P"
Model_list_VP_YCT <- list.files(path = path_YCT, pattern = "\\.xlsx$", full.names = TRUE)
data_frames_YCT <- list()
for (file in Model_list_VP_YCT) {
df_YCT <- read_excel(file)
data_frames_YCT[[file]] <- df_YCT
}
#merge all data frames together
MergedModels_VP_YCT <- data_frames_YCT %>% reduce(left_join, by='Year')
MergedModels_VP_YCT <- MergedModels_VP_YCT %>% select(-contains("Month"))
View(MergedModels_VP_YCT)
Merged_File <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
foo <- function(x) gsub("^[^_]*_", "", x)
Merged_File <- Merged_File %>% rename_all(foo)
View(Merged_File)
new_dfs = []
for col in Merged_File:
id_cols <-  "Year"
n_parts <- 1L
var_cols <- setdiff(colnames(Merged_File), id_cols)
df_parts <- split(var_cols,
cut(seq_along(var_cols), n_parts, labels = FALSE)) |>
lapply(\(v) Merged_File[, c(id_cols, v)])
id_cols <-  "Year"
var_cols <- setdiff(colnames(Merged_File), id_cols)
df_parts <- split(var_cols,
cut(seq_along(var_cols), labels = FALSE)) |>
lapply(\(v) Merged_File[, c(id_cols, v)])
id_cols <-  "Year"
var_cols <- setdiff(colnames(Merged_File), id_cols)
df_parts <- split(var_cols,
cut(seq_along(var_cols), breaks = 1, labels = FALSE)) |>
lapply(\(v) Merged_File[, c(id_cols, v)])
id_cols <-  "Year"
var_cols <- setdiff(colnames(Merged_File), id_cols)
df_parts <- split(var_cols,
cut(seq_along(var_cols), breaks = 66, labels = FALSE)) |>
lapply(\(v) Merged_File[, c(id_cols, v)])
df_parts
var_cols <- setdiff(colnames(Merged_File), id_cols)
split(var_cols,
cut(seq_along(var_cols), breaks = 67, labels = FALSE)) |>
lapply(\(v) Merged_File[, c(id_cols, v)])
var_cols <- setdiff(colnames(Merged_File), id_cols)
df_parts <- split(var_cols,
cut(seq_along(var_cols), breaks = 67, labels = FALSE)) |>
lapply(\(v) Merged_File[, c(id_cols, v)])
df_parts
list2env(df_parts,envir=.GlobalEnv)
View(1)
View(1)
View(1)
View(1)
View(1)
View(1)
View(1)
View(1)
View(10)
1
View(13)
View(10)
View(Merged_File)
id_cols <-  "Year"
var_cols <- setdiff(colnames(Merged_File), id_cols)
df_parts <- split(var_cols,
cut(seq_along(var_cols), breaks = 68, labels = FALSE)) |>
lapply(\(v) Merged_File[, c(id_cols, v)])
df_parts
list2env(df_parts,envir=.GlobalEnv)
View(Merged_File)
Merged_File_VLC <- Merged_File %>% separate(Merged_File, c("Year", "VLC0", "VLC1", "VLC2", "VLC3", "VLC4", "VLC5", "VLC6", "VLC7", "VLC8", "VLC9", "VLC10"), "-")
library(dplyr)
Merged_File_VLC <- Merged_File %>% separate(Merged_File, c("Year", "VLC0", "VLC1", "VLC2", "VLC3", "VLC4", "VLC5", "VLC6", "VLC7", "VLC8", "VLC9", "VLC10"), "-")
library(tidyr)
Merged_File_VLC <- Merged_File %>% separate(Merged_File, c("Year", "VLC0", "VLC1", "VLC2", "VLC3", "VLC4", "VLC5", "VLC6", "VLC7", "VLC8", "VLC9", "VLC10"), "-")
View(Merged_File)
Merged_File_VLC <- Merged_File %>% separate(x, c("Year", "VLC0", "VLC1", "VLC2", "VLC3", "VLC4", "VLC5", "VLC6", "VLC7", "VLC8", "VLC9", "VLC10"), "-")
Merged_File_VLC <- Merged_File %>% separate(x, c("Year", "VLC0", "VLC1", "VLC2", "VLC3", "VLC4", "VLC5", "VLC6", "VLC7", "VLC8", "VLC9", "VLC10"))
Merged_File_VLC <- Merged_File %>% separate(Merged_File, c("Year", "VLC0", "VLC1", "VLC2", "VLC3", "VLC4", "VLC5", "VLC6", "VLC7", "VLC8", "VLC9", "VLC10"))
Merge_Models()
VXC <- read_excel("MergedModels/MergedModels_VXC.xlsx")
VXP <- read_excel("MergedModels/MergedModels_VXP.xlsx")
YCE <- read_excel("MergedModels/MergedModels_VPYC.xlsx")
YCT <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
YCO2ND <- read_excel("MergedModels/MergedModels_VP_YCO2ND.xlsx")
YCO2D <- read_excel("MergedModels/MergedModels_VP_YCO2D.xlsx")
#### Data ####
VXC <- read_excel("MergedModels/MergedModels_VXC.xlsx")
VXP <- read_excel("MergedModels/MergedModels_VXP.xlsx")
YCE <- read_excel("MergedModels/MergedModels_VPYC.xlsx")
YCT <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
YCO2ND <- read_excel("MergedModels/MergedModels_VP_YCO2ND.xlsx")
YCO2D <- read_excel("MergedModels/MergedModels_VP_YCO2D.xlsx")
#### User Interface ####
ui <- fluidPage(
# App title ----
titlePanel("RothCO2 Data Downloader"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c(
"Complete Continuous Models (VXC)",
"Complete One-Off Models (VXP)",
"Carbon Emissions (CE)",
"Carbon Tails (YCT)",
"CO2 emissions without delay (GWP100)",
"CO2 emissions with delay (GWP100)"
)),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
library(shiny)
library(rsconnect)
# runExample("10_download")
#### Data ####
VXC <- read_excel("MergedModels/MergedModels_VXC.xlsx")
VXP <- read_excel("MergedModels/MergedModels_VXP.xlsx")
YCE <- read_excel("MergedModels/MergedModels_VPYC.xlsx")
YCT <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
YCO2ND <- read_excel("MergedModels/MergedModels_VP_YCO2ND.xlsx")
YCO2D <- read_excel("MergedModels/MergedModels_VP_YCO2D.xlsx")
#### User Interface ####
ui <- fluidPage(
# App title ----
titlePanel("RothCO2 Data Downloader"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c(
"Complete Continuous Models (VXC)",
"Complete One-Off Models (VXP)",
"Carbon Emissions (CE)",
"Carbon Tails (YCT)",
"CO2 emissions without delay (GWP100)",
"CO2 emissions with delay (GWP100)"
)),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
#### Server ####
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"Complete Continuous Models (VXC)" = VXC,
"Complete One-Off Models (VXP)" = VXP,
"Carbon Emissions (CE)" = YCE,
"Carbon Tails (YCT)" = YCT,
"CO2 emissions without delay (GWP100)" = YCO2ND,
"CO2 emissions with delay (GWP100)" = YCO2
)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
Downloader <- shinyApp(ui, server)
Downloader
#### Data ####
# VXC <- read_excel("MergedModels/MergedModels_VXC.xlsx")
# VXP <- read_excel("MergedModels/MergedModels_VXP.xlsx")
YCE <- read_excel("MergedModels/MergedModels_VPYC.xlsx")
YCT <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
YCO2ND <- read_excel("MergedModels/MergedModels_VP_YCO2ND.xlsx")
YCO2D <- read_excel("MergedModels/MergedModels_VP_YCO2D.xlsx")
#### User Interface ####
ui <- fluidPage(
# App title ----
titlePanel("RothCO2 Data Downloader"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c(
# "Complete Continuous Models (VXC)",
# "Complete One-Off Models (VXP)",
"Carbon Emissions (CE)",
"Carbon Tails (YCT)",
"CO2 emissions without delay (GWP100)",
"CO2 emissions with delay (GWP100)"
)),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
#### Server ####
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
# "Complete Continuous Models (VXC)" = VXC,
# "Complete One-Off Models (VXP)" = VXP,
"Carbon Emissions (CE)" = YCE,
"Carbon Tails (YCT)" = YCT,
"CO2 emissions without delay (GWP100)" = YCO2ND,
"CO2 emissions with delay (GWP100)" = YCO2
)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
Downloader <- shinyApp(ui, server)
Downloader
rsconnect::deployApp('app')
rsconnect::deployApp('app.R')
rsconnect::deployApp('Shiny_App/app.R')
rsconnect::deployApp('Shiny_App/app')
rsconnect::deployApp('/Shiny_App/app.r')
rsconnect::deployApp('/Shiny_App/app.R')
detach("package:tidyr", unload = TRUE)
rsconnect::setAccountInfo(name='drrufisalis', token='70C94FF00EA5DC20CAE290BC442261E9', secret='WjKfIKh31O0SmcvrDrDU6I8jh/6hB1c7XN8/tNb2')
getwd()
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
YCE <- read_excel("MergedModels/MergedModels_VPYC.xlsx")
YCT <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
YCO2ND <- read_excel("MergedModels/MergedModels_VP_YCO2ND.xlsx")
YCO2D <- read_excel("MergedModels/MergedModels_VP_YCO2D.xlsx")
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
library(shiny)
library(readxl)
# library(rsconnect)
# runExample("10_download")
#### Data ####
# VXC <- read_excel("MergedModels/MergedModels_VXC.xlsx")
# VXP <- read_excel("MergedModels/MergedModels_VXP.xlsx")
YCE <- read_excel("MergedModels/MergedModels_VPYC.xlsx")
YCT <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
YCO2ND <- read_excel("MergedModels/MergedModels_VP_YCO2ND.xlsx")
YCO2D <- read_excel("MergedModels/MergedModels_VP_YCO2D.xlsx")
#### User Interface ####
ui <- fluidPage(
# App title ----
titlePanel("RothCO2 Data Downloader"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c(
# "Complete Continuous Models (VXC)",
# "Complete One-Off Models (VXP)",
"Carbon Emissions (CE)",
"Carbon Tails (YCT)",
"CO2 emissions without delay (GWP100)",
"CO2 emissions with delay (GWP100)"
)),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
#### Server ####
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
# "Complete Continuous Models (VXC)" = VXC,
# "Complete One-Off Models (VXP)" = VXP,
"Carbon Emissions (CE)" = YCE,
"Carbon Tails (YCT)" = YCT,
"CO2 emissions without delay (GWP100)" = YCO2ND,
"CO2 emissions with delay (GWP100)" = YCO2
)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
Downloader(ui, server)
library(shiny)
library(readxl)
# library(rsconnect)
# runExample("10_download")
#### Data ####
# VXC <- read_excel("MergedModels/MergedModels_VXC.xlsx")
# VXP <- read_excel("MergedModels/MergedModels_VXP.xlsx")
YCE <- read_excel("MergedModels/MergedModels_VPYC.xlsx")
YCT <- read_excel("MergedModels/MergedModels_VP_YCT.xlsx")
YCO2ND <- read_excel("MergedModels/MergedModels_VP_YCO2ND.xlsx")
YCO2D <- read_excel("MergedModels/MergedModels_VP_YCO2D.xlsx")
#### User Interface ####
ui <- fluidPage(
# App title ----
titlePanel("RothCO2 Data Downloader"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c(
# "Complete Continuous Models (VXC)",
# "Complete One-Off Models (VXP)",
"Carbon Emissions (CE)",
"Carbon Tails (YCT)",
"CO2 emissions without delay (GWP100)",
"CO2 emissions with delay (GWP100)"
)),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
#### Server ####
server <- function(input, output) {
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
# "Complete Continuous Models (VXC)" = VXC,
# "Complete One-Off Models (VXP)" = VXP,
"Carbon Emissions (CE)" = YCE,
"Carbon Tails (YCT)" = YCT,
"CO2 emissions without delay (GWP100)" = YCO2ND,
"CO2 emissions with delay (GWP100)" = YCO2
)
})
# Table of selected dataset ----
output$table <- renderTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
}
shinyApp(ui, server)
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
Merge_Models()
path_YCO2D <- "CO2Emissions_P_Delay"
Model_list_VP_YCO2D <- list.files(path = path_YCO2D, pattern = "\\.xlsx$", full.names = TRUE)
data_frames_YCO2D <- list()
for (file in Model_list_VP_YCO2D) {
df_YCO2D <- read_excel(file)
data_frames_YCO2D[[file]] <- df_YCO2D
}
devtools::load_all()
install.packages("qpcR")
devtools::load_all()
Merge_Models()
rsconnect::deployApp('Shiny_App')
devtools::load_all()
Merge_Models()
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
rsconnect::deployApp('Shiny_App')
shinyApp(ui, server)
runApp('Shiny_App')
YCE<- read.csv("MergedModels/MergedModels_VPYC.csv")
YCT <- read.csv("MergedModels/MergedModels_VP_YCT.csv")
YCO2ND <- read.csv("MergedModels/MergedModels_VP_YCO2ND.csv")
YCO2D <- read.csv("MergedModels/MergedModels_VP_YCO2D.csv")
#### User Interface ####
ui <- fluidPage(
# App title ----
titlePanel("RothCO2 Data Downloader"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c(
# "Complete Continuous Models (VXC)",
# "Complete One-Off Models (VXP)",
"Carbon Emissions (CE)",
"Carbon Tails (YCT)",
"CO2 emissions without delay (GWP100)",
"CO2 emissions with delay (GWP100)"
))),
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c(
# "Complete Continuous Models (VXC)",
# "Complete One-Off Models (VXP)",
"Carbon Emissions (CE)",
"Carbon Tails (YCT)",
"CO2 emissions without delay (GWP100)",
"CO2 emissions with delay (GWP100)"
)
),
# Button
downloadButton("downloadData", "Download")
),
# Main panel for displaying outputs ----
mainPanel(
tableOutput("table")
)
)
)
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App')
runApp('Shiny_App/Complex/app_Complex.R')
runApp('Shiny_App/Complex/app_Complex.R')
runApp('Shiny_App/Complex/app_Complex.R')
runApp('Shiny_App/Complex/app_Complex.R')
runApp('Shiny_App/Complex/app_Complex.R')
runApp('Shiny_App/Complex/app_Complex.R')
runApp('Shiny_App/Complex/app_Complex.R')
